<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>D&D Cooking Inventory Tracker</title>
<style>
    /* Basic styling for the body */
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f0e6d2;
        color: #333;
        margin: 0;
        padding: 20px;
    }

    /* Container for tracker content */
    #tracker-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        max-width: 800px;
        margin: 0 auto; /* Centers container on the page */
    }

    /* Styling for main header */
    h1 {
        font-size: 2em;
        color: #3a3a3a;
        margin-bottom: 20px;
        text-align: center;
    }

    /* Result and inventory sections */
    #result, #inventory {
        background-color: #fff;
        padding: 20px;
        border: 2px solid #b5651d;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        max-width: 600px;
        width: 100%;
        margin-top: 20px;
    }

    /* Header for recipe check and inventory */
    h2 {
        color: #b5651d;
        font-size: 1.5em;
        margin-bottom: 15px;
        border-bottom: 1px solid #b5651d;
        padding-bottom: 5px;
    }

    /* Sub-header for each recipe name */
    h3 {
        font-size: 1.2em;
        color: #333;
        margin-top: 15px;
        margin-bottom: 5px;
    }

    /* Paragraph for ingredient availability message */
    p.available {
        color: #228b22; /* Green text if recipe can be made */
        margin: 0;
    }

    p.missing {
        color: #a52a2a; /* Red text if ingredients are missing */
        margin: 0;
    }

    /* Styling for missing ingredients list */
    ul {
        list-style-type: square;
        margin-left: 10px;
        color: #a52a2a;
    }

    li {
        margin: 5px 0;
    }
</style>
</head>
<body>
    <div id="tracker-container">
        <h1>D&D Cooking Inventory Tracker</h1>
        <div id="result">Loading...</div>
        <div id="inventory">Loading inventory...</div>
    </div>
    <script>
        // Google Sheets API key and Sheet ID
        const API_KEY = 'AIzaSyDGoVjsiA5J750npANFhPEo_wDsRhnkMCg'; // Replace with your actual API key
        const SHEET_ID = '1mDumKt1M9ZJHQXz6GnxDDMr6T7vEWkV3y7djyf_e9W8'; // Replace with your actual Sheet ID

// Recipes with required ingredients
const recipes = {
    "Basic Rice Pilaf": {
        rice: 1,
        onion: 1,
        salt: 1,
        butter: 1,
        herbs: 1
    },
    "Herb Crusted Fish": {
        fish: 1,
        herbs: 1,
        lemon: 1,
        salt: 1,
        oil: 1
    },
    "Herb Flatbread": {
        flour: 1,
        water: 1,
        salt: 1,
        herbs: 1,
        oil: 1
    },
    "Honey Glazed Carrots": {
        carrots: 1,
        honey: 1,
        butter: 1,
        salt: 1,
        pepper: 1
    },
    "Lemon Herb Roasted Mushrooms": {
        mushrooms: 1,
        herbs: 1,
        lemon: 1,
        oil: 1,
        salt: 1
    },
    "Mushroom and Onion Saute": {
        mushrooms: 1,
        onion: 1,
        butter: 1,
        salt: 1,
        pepper: 1
    },
    "Omelette": {
        eggs: 3,
        butter: 1,
        salt: 1
    },
    "Pancakes": {
        flour: 1,
        milk: 1,
        eggs: 1,
        salt: 1
    },
    "Potato Leek Soup": {
        potatoes: 1,
        leeks: 1,
        water: 1,
        salt: 1,
        pepper: 1
    },
    "Roasted Root Vegetables": {
        turnips: 1,
        parsnips: 1,
        carrots: 1,
        salt: 1,
        oil: 1
    },
    "Savory Meat Veggie Stew": {
        meat: 1,
        carrots: 1,
        potatoes: 1,
        onion: 1,
        salt: 1,
        water: 1
    },
    "Scrambled Eggs": {
        eggs: 1,
        salt: 1,
        pepper: 1,
        butter: 1,
        herbs: 1
    },
    "Simple Cake": {
        flour: 2,
        sugar: 1,
        eggs: 2,
        milk: 1,
        butter: 1
    },
    "Spiced Meat Patties": {
        meat: 1,
        paprika: 1,
        garlic: 1,
        salt: 1,
        pepper: 1
    },
    "Spiced Porridge": {
        grains: 1,
        water: 1,
        cinnamon: 1,
        honey: 1,
        fruit: 1
    },
    "Stewed Beans With Herbs": {
        beans: 1,
        onion: 1,
        salt: 1,
        herbs: 1,
        water: 1
    },
    "Sweet Trail Mix": {
        berries: 1,
        nuts: 1,
        honey: 1,
        cinnamon: 1
    },
    "Wild Greens Salad": {
        greens: 1,
        fruit: 1,
        nuts: 1,
        vinegar: 1,
        oil: 1
    }
};


        // Fetch party inventory from Google Sheets
        async function fetchInventory() {
            const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/Sheet1?key=${API_KEY}`;
            const response = await fetch(url);
            const data = await response.json();
            return parseInventoryData(data.values);
        }

        // Convert Google Sheets data to inventory object
        function parseInventoryData(data) {
            const inventory = {};
            data.slice(1).forEach(row => { // Skip the header row
                const [ingredient, quantity] = row;
                inventory[ingredient.toLowerCase()] = parseInt(quantity, 10);
            });
            return inventory;
        }

        // Function to check if party has enough ingredients
        function checkRecipes(partyInventory, recipes) {
            let resultHTML = "<h2>Recipe Check</h2>";

            for (const [recipeName, ingredients] of Object.entries(recipes)) {
                let canMake = true;
                let missingIngredients = [];

                for (const [ingredient, amountNeeded] of Object.entries(ingredients)) {
                    if (!partyInventory[ingredient] || partyInventory[ingredient] < amountNeeded) {
                        canMake = false;
                        missingIngredients.push(`${ingredient} (need ${amountNeeded}, have ${partyInventory[ingredient] || 0})`);
                    }
                }

                resultHTML += `<h3>${recipeName}</h3>`;
                if (canMake) {
                    resultHTML += `<p class="available">You have all the ingredients to make this recipe!</p>`;
                } else {
                    resultHTML += `<p class="missing">Missing ingredients:</p><ul>`;
                    missingIngredients.forEach(item => {
                        resultHTML += `<li>${item}</li>`;
                    });
                    resultHTML += "</ul>";
                }
            }
            document.getElementById("result").innerHTML = resultHTML;
        }

        // Function to display inventory
        function displayInventory(partyInventory) {
            let inventoryHTML = "<h2>Party Inventory</h2><ul>";
            for (const [ingredient, quantity] of Object.entries(partyInventory)) {
                inventoryHTML += `<li>${ingredient}: ${quantity}</li>`;
            }
            inventoryHTML += "</ul>";
            document.getElementById("inventory").innerHTML = inventoryHTML;
        }

        // Initialize: Fetch inventory and check recipes
        async function init() {
            const partyInventory = await fetchInventory();
            checkRecipes(partyInventory, recipes);
            displayInventory(partyInventory); // Display inventory below results
        }

        // Run the program
        init();
    </script>
</body>
</html>
